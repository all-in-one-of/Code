########################### VEX ###########################
// Change color of point if point exceeds certain y-pos.
vector pos = point(0, "P", 0);
int pts[] = {};
for (int i = 0; i < npoints(0); i++){
    pos = point(0, "P", i);
    if (pos.y > 3){
        append(pts, i);
        }
    }
    
foreach(int i; pts){
    setpointattrib(0, "Cd", i, {0.6,0.2,0.8}, "set");
    }
printf("%s\n", pts);

########################### VEX ###########################
// Change color based on "xor" comparison of y-pos of two geometries.
vector pos1 = point(0, "P", 0);
vector pos2 = point(0, "P", 1);

int cond1 = pos1.y > 3;
int cond2 = pos2.y > 3;

int xor = cond1 ^ cond2;

if (xor){
    setpointattrib(0, "Cd", 0, {0,1,0}, "set");
    setpointattrib(0, "Cd", 1, {0,1,0}, "set");
    }

########################## PYTHON ##########################
# Run in Python SOP.
# Update "Cd" attrib based on "xor" comparison of y-position of 2 geometries.
node = hou.pwd()
geo = node.geometry()

pts = geo.iterPoints()
xform1 = hou.node("../transform1")
xform2 = hou.node("../transform2")

cond1 = xform1.evalParm("ty") > 3
cond2 = xform2.evalParm("ty") > 3

xor = cond1 != cond2
color = hou.Vector3((0.2,0.2,0.6))
if xor:
    geo.addAttrib(hou.attribType.Point, "Cd", (0.2,0.2,0.6))

########################## PYTHON ##########################
# Create blast node for each unique value of "cat_name" prim attrib.
import hou
null = hou.node("/obj/geo1/null1")
geo = null.geometry()
prims = geo.prims()
geoObj = hou.node("/obj/geo1/")

# Create list containing unique values of required attribute.
catNames = []
for prim in prims:
    if prim.attribValue("cat_name") not in catNames:
        catNames.append(prim.attribValue("cat_name"))
        
print catNames

# Create values for blast nodes.
blastVals =  []
for i in range(0, len(catNames)):
    val = "@cat_name=" + catNames[i]
    blastVals.append(val)

print blastVals

# Create blast nodes, set param values and their inputs.
for i in range(0, len(catNames)):
    blast = geoObj.createNode("blast")
    blast.setParms({"group": blastVals[i], "negate": True})
    blast.setFirstInput(null)
    blast.moveToGoodPosition()


########################## PYTHON ##########################
# Write "Cd" prim attrib values into a text file.
import hou

objSphere = hou.node('/obj/sphere1')
outNull = hou.node('/obj/sphere1/out_geo')
outNullGeo = outNull.geometry()

# Write file at defined disk path.
colorFile = open('/path/to/file.txt', 'w')
prims = outNullGeo.prims()

# Fetch prim attribute values and append those to empty lists.
colorAttribVals = []
pathAttribVals = []
for prim in prims:
    Cd = prim.attribValue('Cd')
    path = prim.attribValue('path')
    colorAttribVals.append(Cd)
    pathAttribVals.append(path)

# Write those values into file.
for color, path in zip(colorAttribVals, pathAttribVals):
    colorFile.write(str(color) + ' | ' + path + '\n')

colorFile.close()

########################## PYTHON ##########################
# Run in Python SOP.
# Add string attribute and update value through loop.
node = hou.pwd()
geo = node.geometry()

points = geo.iterPoints()
for point in points:
    point.setAttribValue("attributeName", "Value")

# Alternative method below to set uniform value for all points.
geo.addAttrib(hou.attribType.Point, "attributeName", "")
geo.setPointStringAttribValues("attributeName", ["hello"] * len(geo.points()))

########################## PYTHON ##########################
# Run in Python SOP.
# Activate geometry at certain frames.
node = hou.pwd()
geo = node.geometry()
sFrames = node.evalParm("frames")	#custom string channel
framesList = sFrames.split()
frames = [int(f) for f in framesList]
points = geo.points()
if hou.frame() not in frames:
   geo.deletePoints(points)

########################## PYTHON ##########################
# Run in Python SOP.
# Transform geometry using hmath functions.
node = hou.pwd()
geo = node.geometry()

vec = hou.Vector3((5, -2, 4))
M = hou.hmath.buildTranslate(vec)	#build matrix4 from a vector
geo.transform(M)
print M

import hou, os, spider

########################## PYTHON ##########################
import hou, os, spider

wedge_import = hou.node('/obj/geo1/wedge_import')
cacheOutPath = wedge_import.evalParm('cachenode')
import_type = wedge_import.evalParm('filenodetype')
job = hou.expandString('$JOB')

cache_node = hou.node(cacheOutPath)
shot = cache_node.evalParm('ivy_shot')
task = cache_node.evalParm('ivy_task')
label = cache_node.evalParm('ivy_label')
lod = cache_node.evalParm('ivy_lod')
version = cache_node.evalParm('ivy_version_string')

if len(str(version)) < 2:
    lodstring = '_lod' + lod + '_v00' + version
else:
    lodstring = '_lod' + lod + '_v0' + version
    
initString = 'BCH_' + shot + '_' + task + '_'
fullString = initString + label + lodstring

label_split = label.split('w')[0]
label_split_version = label.split('w')[1]

job_path = job.split('houdini')[0] + 'ivy/bch/'
job_folder = os.listdir(job_path)

sh = spider.getHandler()
show = os.environ['SHOW']

wedge_import.allowEditingOfContents()

inside = wedge_import.children()

for inode in inside:
    hou.node(inode.path()).destroy()

mergeInput = wedge_import.evalParm('mergeresult')
version = wedge_import.evalParm('version')

null = wedge_import.createNode('null', 'OUT')

if mergeInput == 1:
    merge = wedge_import.createNode('merge')
else:
    switch = wedge_import.createNode('switch')
    
counter = 0
# Make list of cache folder names.
for filename in job_folder:
    if filename.endswith(lodstring):
        if filename.startswith(initString + label_split):
            file_folder = os.listdir(job_path + '/' + filename)
            
            # Make list of file names.
            for subfile in file_folder:
                fullpath = job_path + filename + '/' + subfile
                fullpath_split = fullpath.split('.')[0]
                fullpath_combine = fullpath_split + '$F4.bgeo.sc'
                
            if import_type == 0:
                file_node = wedge_import.createNode('file')
                file_node.parm('file').set(fullpath_combine)
                file_node.setInput(0, wedge_import.indirectInputs()[0])
                
                if mergeInput == 1:
                    merge.setInput(counter, file_node)
                    
                else:
                    switch.setInput(counter, file_node)
                    
            else:
                stalkname = filename
                stalk = sh['Stalk'].one(
                sh['Stalk']['job'] == show,
                sh['Stalk']['stalkname'] == stalkname
                )
                uuid = stalk['dnuuid']
                
                file_node = wedge_import.createNode('cacheIn')
                hit = file_node.parm("menu_source").menuItems()
                file_node.parm("menu_source").set(hit[1])
                file_node.parm('stalkUuid').set(uuid)
                file_node.setInput(0, wedge_import.indirectInputs()[0])
                
                if mergeInput == 1:
                    merge.setInput(counter, file_node)
                else:
                    switch.setFirstInput(file_node)
                    
            counter += 1
            
if mergeInput == 1:
    null.setFirstInput(merge)
else:
    null.setFirstInput(switch)
wedge_import.layoutChildren()

########################## PYTHON ##########################
# Create new shelf tool and paste the script.
# Compare parameter values of two nodes and display modified ones.
def compare_parms(node1, node2):
    
    parms1 = node1.parms()
    parms2 = node2.parms()
    
    mod_parms = []
    for parm1, parm2 in zip(parms1, parms2):
        if parm1.eval() != parm2.eval():
            mod_parms.append(parm1.description())
            
    parms = "\n".join(mod_parms)
    print parms
    hou.ui.displayMessage(parms)

    
try:
    node1 = hou.selectedNodes()[0]
    node2 = hou.selectedNodes()[1]
    compare_parms(node1, node2)
except IndexError:
    hou.ui.displayMessage("Please select two nodes to compare their parameter values.", \
title="Select Nodes")
